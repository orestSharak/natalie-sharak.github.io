{"ast":null,"code":"/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTransitionGroup\n */\n'use strict';\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar createReactClass = require('create-react-class');\n\nvar difference = require('lodash.difference');\n\nvar keyBy = require('lodash.keyby');\n\nvar assign = require('object-assign');\n\nvar getChildMapping = function getChildMapping(children) {\n  return keyBy(React.Children.toArray(children), function (child) {\n    return child.key;\n  });\n};\n\nvar ReactTransitionGroupPlus = createReactClass({\n  displayName: 'ReactTransitionGroupPlus',\n  propTypes: {\n    component: PropTypes.any,\n    childFactory: PropTypes.func,\n    transitionMode: PropTypes.oneOf(['in-out', 'out-in', 'simultaneous']),\n    deferLeavingComponentRemoval: PropTypes.bool\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      component: 'span',\n      childFactory: function childFactory(arg) {\n        return arg;\n      },\n      transitionMode: 'simultaneous',\n      deferLeavingComponentRemoval: false\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      children: getChildMapping(this.props.children)\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    this.currentlyEnteringOrEnteredKeys = {};\n    this.currentlyEnteringKeys = {};\n    this.currentlyEnteringPromises = {};\n    this.currentlyLeavingKeys = {};\n    this.currentlyLeavingPromises = {};\n    this.pendingEnterCallbacks = {};\n    this.pendingLeaveCallbacks = {};\n    this.deferredLeaveRemovalCallbacks = [];\n    this.keysToEnter = [];\n    this.keysToLeave = [];\n    this.cancel = null;\n  },\n  componentDidMount: function componentDidMount() {\n    var initialChildMapping = this.state.children;\n\n    for (var key in initialChildMapping) {\n      if (initialChildMapping[key]) {\n        this.performAppear(key);\n      }\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var nextChildMapping = getChildMapping(nextProps.children);\n    var prevChildMapping = this.state.children;\n    var mergedChildMapping = assign({}, prevChildMapping, nextChildMapping);\n    this.setState({\n      children: mergedChildMapping\n    });\n    var key;\n\n    for (key in nextChildMapping) {\n      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);\n\n      if (nextChildMapping[key] && (!hasPrev || this.currentlyLeavingKeys[key])) {\n        this.keysToEnter.push(key);\n      }\n    }\n\n    for (key in prevChildMapping) {\n      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);\n\n      if (prevChildMapping[key] && !hasNext) {\n        this.keysToLeave.push(key);\n      }\n    }\n\n    if (this.props.transitionMode === 'out-in') {\n      this.keysToEnter = difference(this.keysToEnter, this.keysToLeave);\n    } // If we want to someday check for reordering, we could do it here.\n\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    var keysToEnter = this.keysToEnter;\n    var keysToLeave = this.keysToLeave;\n\n    switch (this.props.transitionMode) {\n      case 'out-in':\n        this.keysToLeave = [];\n\n        if (keysToLeave.length) {\n          keysToLeave.forEach(this.performLeave);\n        } else {\n          this.keysToEnter = [];\n          keysToEnter.forEach(this.performEnter);\n        }\n\n        break;\n\n      case 'in-out':\n        this.keysToEnter = [];\n        this.keysToLeave = [];\n\n        if (keysToEnter.length) {\n          Promise.all(keysToEnter.map(this.performEnter)).then(function () {\n            keysToLeave.forEach(this.performLeave);\n          }.bind(this));\n        } else {\n          keysToLeave.forEach(this.performLeave);\n        }\n\n        break;\n\n      default:\n        this.keysToEnter = [];\n        this.keysToLeave = [];\n        keysToEnter.forEach(this.performEnter);\n        keysToLeave.forEach(this.performLeave);\n        break;\n    }\n  },\n  performAppear: function performAppear(key) {\n    this.currentlyEnteringOrEnteredKeys[key] = true;\n    var component = this.refs[key];\n\n    if (component.componentWillAppear) {\n      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));\n    } else {\n      this._handleDoneAppearing(key);\n    }\n  },\n  _handleDoneAppearing: function _handleDoneAppearing(key) {\n    var component = this.refs[key];\n\n    if (component && component.componentDidAppear) {\n      component.componentDidAppear();\n    }\n\n    var currentChildMapping = getChildMapping(this.props.children);\n\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n      // This was removed before it had fully appeared. Remove it.\n      this.performLeave(key);\n    }\n  },\n  performEnter: function performEnter(key) {\n    if (this.currentlyEnteringKeys[key]) {\n      return this.currentlyEnteringPromises[key];\n    }\n\n    this.cancelPendingLeave(key);\n    var component = this.refs[key];\n\n    if (!component) {\n      return Promise.resolve();\n    }\n\n    this.currentlyEnteringOrEnteredKeys[key] = true;\n    this.currentlyEnteringKeys[key] = true;\n\n    var callback = this._handleDoneEntering.bind(this, key);\n\n    this.pendingEnterCallbacks[key] = callback;\n    var enterPromise = new Promise(function (resolve) {\n      if (component.componentWillEnter) {\n        component.componentWillEnter(resolve);\n      } else {\n        resolve();\n      }\n    }).then(callback);\n    this.currentlyEnteringPromises[key] = enterPromise;\n    return enterPromise;\n  },\n  _handleDoneEntering: function _handleDoneEntering(key) {\n    delete this.pendingEnterCallbacks[key];\n    delete this.currentlyEnteringPromises[key];\n    delete this.currentlyEnteringKeys[key];\n    this.deferredLeaveRemovalCallbacks.forEach(function (fn) {\n      fn();\n    });\n    this.deferredLeaveRemovalCallbacks = [];\n    var component = this.refs[key];\n\n    if (component && component.componentDidEnter) {\n      component.componentDidEnter();\n    }\n\n    var currentChildMapping = getChildMapping(this.props.children);\n\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key) && this.currentlyEnteringOrEnteredKeys[key]) {\n      // This was removed before it had fully entered. Remove it.\n      if (this.props.transitionMode !== 'in-out') {\n        this.performLeave(key);\n      }\n    }\n  },\n  performLeave: function performLeave(key) {\n    if (this.currentlyLeavingKeys[key]) {\n      //already leaving, let it finish\n      return this.currentlyLeavingPromises[key];\n    }\n\n    this.cancelPendingEnter(key);\n    var component = this.refs[key];\n\n    if (!component) {\n      return Promise.resolve();\n    }\n\n    this.currentlyLeavingKeys[key] = true;\n\n    var callback = this._handleDoneLeaving.bind(this, key);\n\n    this.pendingLeaveCallbacks[key] = callback;\n    var leavePromise = new Promise(function (resolve) {\n      if (component.componentWillLeave) {\n        component.componentWillLeave(resolve);\n      } else {\n        resolve();\n      }\n    }) // Note that this is somewhat dangerous b/c it calls setState()\n    // again, effectively mutating the component before all the work\n    // is done.\n    .then(callback);\n    this.currentlyLeavingPromises[key] = leavePromise;\n    return leavePromise;\n  },\n  _handleDoneLeaving: function _handleDoneLeaving(key) {\n    delete this.pendingLeaveCallbacks[key];\n    delete this.currentlyLeavingKeys[key];\n    delete this.currentlyLeavingPromises[key];\n    var component = this.refs[key];\n\n    if (component && component.componentDidLeave) {\n      component.componentDidLeave();\n    }\n\n    var currentChildMapping = getChildMapping(this.props.children);\n\n    var updateChildren = function updateChildren() {\n      this.setState(function (state) {\n        var newChildren = assign({}, state.children);\n        delete newChildren[key];\n        return {\n          children: newChildren\n        };\n      });\n    }.bind(this);\n\n    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {\n      // This entered again before it fully left. Add it again.\n      // but only perform enter if currently animating out, not already animated out\n      if (this.props.transitionMode !== 'in-out') {\n        this.performEnter(key);\n      }\n    } else {\n      delete this.currentlyEnteringOrEnteredKeys[key];\n\n      if (this.props.deferLeavingComponentRemoval && this.props.transitionMode !== 'in-out') {\n        this.deferredLeaveRemovalCallbacks.push(updateChildren);\n        this.forceUpdate();\n      } else {\n        updateChildren();\n      }\n    }\n  },\n  cancelPendingLeave: function cancelPendingLeave(key) {\n    if (this.pendingLeaveCallbacks[key]) {\n      this.pendingLeaveCallbacks[key]();\n      delete this.pendingLeaveCallbacks[key];\n    }\n  },\n  cancelPendingEnter: function cancelPendingEnter(key) {\n    if (this.pendingEnterCallbacks[key]) {\n      this.pendingEnterCallbacks[key]();\n      delete this.pendingEnterCallbacks[key];\n    }\n  },\n  cleanProps: function cleanProps(props) {\n    delete props.component;\n    delete props.transitionMode;\n    delete props.childFactory;\n    delete props.deferLeavingComponentRemoval;\n    return props;\n  },\n  render: function render() {\n    // TODO: we could get rid of the need for the wrapper node\n    // by cloning a single child\n    var childrenToRender = [];\n\n    for (var key in this.state.children) {\n      var child = this.state.children[key];\n\n      if (child) {\n        // You may need to apply reactive updates to a child as it is leaving.\n        // The normal React way to do it won't work since the child will have\n        // already been removed. In case you need this behavior you can provide\n        // a childFactory function to wrap every child, even the ones that are\n        // leaving.\n        childrenToRender.push(React.cloneElement(this.props.childFactory(child), {\n          ref: key,\n          key: key\n        }));\n      }\n    }\n\n    return React.createElement(this.props.component, this.cleanProps(assign({}, this.props)), childrenToRender);\n  }\n});\nmodule.exports = ReactTransitionGroupPlus;","map":null,"metadata":{},"sourceType":"script"}